from bencoder import OrderedDict,bdecode

a = b'd1:rd2:id20:<\x00rsH\xb3\xb8\xedp\xba\xa1\xe1A\x1b8i\xd8H\x13!5:nodes208:Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2e1:t0:1:v4:JB\x00\x001:y1:re'
OrderedDict(
	[(b'r', OrderedDict([(b'id', b'<\x00rsH\xb3\xb8\xedp\xba\xa1\xe1A\x1b8i\xd8H\x13!'),
						 (b'nodes', b'Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2Q\x82\xa2\x8f\xc6\xf4\xa1\xc4\xf6\xf6`\xff\xben\xbf\xbf\x9f\x1dZ \xd5\x88O\x1b/\xf2')])),
	 (b't', b''),
	 (b'v', b'JB\x00\x00'),
	 (b'y', b'r')])


def is_type(obj) -> OrderedDict:
	"""这里这样解码了之后后面的获取node数据可能会出错"""
	if isinstance(obj, dict):
		return dict_obj(obj)

	elif isinstance(obj, list):
		return list_obj(obj)

	elif isinstance(obj, bytes):
		return bytes_obj(obj)
	elif isinstance(obj, int):
		return int
	else:
		print(type(obj))
		return obj


def dict_obj(obj: dict) -> dict:
	a = {}
	for k, v in obj.items():
		a[is_type(k)] = is_type(v)
	return a


def list_obj(obj: list) -> list:
	a = []
	for i in obj:
		a.append(is_type(i))
	return a


def bytes_obj(obj: bytes) -> str:
	try:
		return bencoder.bdecode(obj)
	except:
		print(obj)
		return ''


print(bencoder.bdecode(a))
